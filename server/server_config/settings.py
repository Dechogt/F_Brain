"""
Django settings for server_config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
# import environ
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "amqp://guest:guest@rabbitmq:5672//")
CELERY_RESULT_BACKEND = "django-db"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

# Exemple avec os.getenv
AUTH0_DOMAIN = os.getenv('AUTH0_DOMAIN') # <-- Assure-toi que le nom de la variable correspond
AUTH0_API_AUDIENCE = os.getenv('AUTH0_API_AUDIENCE') # Vérifie aussi celle-ci

# L'URL JWKS est construite en utilisant AUTH0_DOMAIN
AUTH0_JWKS_URL = f'https://{AUTH0_DOMAIN}/.well-known/jwks.json'


# env = environ.Env(
#     # Définis les types par défaut si les variables ne sont pas trouvées
#     DATABASE_URL=(str, 'postgres://test_user:test_password@db:5432/gaming_followers_test'),
# )

# environ.Env.read_env(os.path.join(BASE_DIR, '..', '.env'))  # Charge les variables d'environnement depuis le fichier .env hors de ce projet

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-u2y)90@eilwlgqzkiqf(#7i4dh+@q=^%22^-0kugww(tjiw@0&'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'web',  # Nom du service Docker
    '0.0.0.0',
    
]


# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_prometheus',
    'django_celery_results',
    'django_celery_beat',
    'gameur',
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'server_config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server_config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('POSTGRES_HOST'),
        'PORT': 5432,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:8000",  
]

# Comme j'utilise les credentials (outils ou cookies) pour les requêtes CORS, il faut activer cette option 
CORS_ALLOW_CREDENTIALS = True


# Configuration Auth0 pour validation manuelle
AUTH0_DOMAIN = os.getenv('VITE_AUTH0_DOMAIN') # Ton domaine Auth0
AUTH0_API_AUDIENCE = os.getenv('VITE_AUTH0_AUDIENCE') # L'audience de ton API
AUTH0_JWKS_URL = f'https://{AUTH0_DOMAIN}/.well-known/jwks.json' # URL JWKSw

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Chemin ABSOLU où collectstatic copiera les fichiers
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Créera un dossier `static/` à la racine

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Dossiers supplémentaires où Django cherche les statiques
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'gameur/static'),  # Si vous avez une app "
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'