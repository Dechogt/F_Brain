name: 🎮 Gaming Platform - Git Flow CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # =============================================
  # JOB 1: FRONTEND - Tests et qualité
  # =============================================
  frontend-quality:
    name: 🎨 Frontend Quality Check
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'frontend') || contains(github.ref, 'feature/') || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
    
    - name: 🔧 Install frontend dependencies
      working-directory: ./frontend
      run: yarn install --frozen-lockfile
    
    - name: 🧹 Lint frontend code
      working-directory: ./frontend
      run: |
        yarn lint || echo "⚠️ ESLint issues found"
    
    - name: 🧪 Run frontend tests
      working-directory: ./frontend
      run: |
        yarn test:coverage || echo "⚠️ Some tests failed"
    
    - name: 📊 Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # =============================================
  # JOB 2: BACKEND DJANGO - Tests et qualité
  # =============================================
  backend-quality:
    name: 🐍 Backend Django Quality Check
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'backend') || contains(github.ref, 'feature/') || github.ref == 'refs/heads/develop'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gaming_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: 🔍 Run Django checks
      working-directory: ./backend
      run: |
        python manage.py check
        python manage.py check --deploy
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/gaming_platform_test
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
    
    - name: 🧪 Run Django tests
      working-directory: ./backend
      run: |
        python manage.py test --verbosity=2 --keepdb
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/gaming_platform_test
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
    
    - name: 📊 Generate coverage report
      working-directory: ./backend
      run: |
        coverage run --source='.' manage.py test
        coverage xml
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/gaming_platform_test
        SECRET_KEY: test-secret-key-for-ci
    
    - name: 📈 Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # =============================================
  # JOB 3: INTEGRATION TESTS - Frontend + Backend
  # =============================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gaming_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python for Django
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Setup Node.js for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
    
    - name: 🔧 Install all dependencies
      run: |
        # Backend
        cd backend
        pip install -r requirements.txt
        cd ..
        # Frontend
        cd frontend
        yarn install --frozen-lockfile
        cd ..
    
    - name: 🚀 Start Django server
      working-directory: ./backend
      run: |
        python manage.py migrate
        python manage.py collectstatic --noinput
        python manage.py runserver 8000 &
        sleep 10
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/gaming_platform_test
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: True
    
    - name: 🧪 Run E2E tests
      working-directory: ./frontend
      run: |
        yarn build
        yarn test:e2e || echo "⚠️ E2E tests need to be implemented"
      env:
        VITE_API_BASE_URL: http://localhost:8000/api/v1

  # =============================================
  # JOB 4: BUILD & DEPLOY STAGING (develop branch)
  # =============================================
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
    
    - name: 🏗️ Build frontend for staging
      working-directory: ./frontend
      run: |
        yarn install --frozen-lockfile
        yarn build
      env:
        VITE_AUTH0_DOMAIN: ${{ secrets.STAGING_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID: ${{ secrets.STAGING_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL: ${{ secrets.STAGING_API_BASE_URL }}
    
    - name: 🚀 Deploy frontend to staging
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=frontend/dist --alias=staging-${{ github.sha }}
      env:
        NETLIFY_SITE_ID: ${{ secrets.STAGING_NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    
    - name: 🐍 Deploy Django to staging
      run: |
        echo "🚀 Deploying Django backend to staging..."
        # Exemple avec Heroku
        # heroku login --interactive
        # git push heroku-staging develop:main
        # Ou autre méthode de déploiement
    
    - name: 📧 Notify team - Staging deployed
      if: success()
      run: |
        echo "✅ Gaming Platform staging deployed successfully!"
        echo "🔗 Frontend: https://staging-${{ github.sha }}--your-site.netlify.app"
        echo "🔗 Backend: https://your-staging-api.herokuapp.com"

  # =============================================
  # JOB 5: DEPLOY PRODUCTION (main branch)
  # =============================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://your-gaming-platform.com
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
    
    - name: 🏗️ Build frontend for production
      working-directory: ./frontend
      run: |
        yarn install --frozen-lockfile
        yarn build
      env:
        VITE_AUTH0_DOMAIN: ${{ secrets.PROD_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID: ${{ secrets.PROD_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL: ${{ secrets.PROD_API_BASE_URL }}
    
    - name: 🚀 Deploy frontend to production
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=frontend/dist
      env:
        NETLIFY_SITE_ID: ${{ secrets.PROD_NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    
    - name: 🐍 Deploy Django to production
      run: |
        echo "🚀 Deploying Django backend to production..."
        # Exemple avec Heroku
        # heroku login --interactive
        # git push heroku main
        # heroku run python manage.py migrate
        # heroku run python manage.py collectstatic --noinput
    
    - name: 🏷️ Create release tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v$(date +'%Y.%m.%d')" -m "Release $(date +'%Y.%m.%d')"
        git push origin --tags
    
    - name: 📧 Notify team - Production deployed
      if: success()
      run: |
        echo "🎉 Gaming Platform production deployed successfully!"
        echo "🔗 Live site: https://your-gaming-platform.com"

  # =============================================
  # JOB 6: SECURITY & PERFORMANCE (main branch)
  # =============================================
  security-performance:
    name: 🔒 Security & Performance
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔍 Frontend security audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level moderate || echo "⚠️ Frontend vulnerabilities found"
    
    - name: 🐍 Backend security check
      working-directory: ./backend
      run: |
        pip install safety
        safety check || echo "⚠️ Backend vulnerabilities found"
    
    - name: ⚡ Lighthouse performance check
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true