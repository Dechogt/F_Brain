name: 🎮 Gaming Followers CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # =============================================
  # JOB 1: FRONTEND - Tests et qualité (Yarn)
  # =============================================
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: './client/yarn.lock'

    - name: 🔧 Install dependencies with Yarn
      working-directory: ./client
      run: yarn install --frozen-lockfile

    - name: 🧹 Lint code
      working-directory: ./client 
      run: yarn lint
      continue-on-error: true

    - name: 🧪 Run tests
      working-directory: ./client
      run: yarn test
      continue-on-error: true

    - name: 🏗️ Build project
      working-directory: ./client 
      run: yarn build
      continue-on-error: true

  # ================================
  # JOB 2: BACKEND DJANGO (Poetry)
  # ================================
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: 🔧 Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
     # working-directory: ./server <--   pour le cache si poetry.lock est dans backend

    - name: 🔧 Install dependencies with Poetry
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: ./server 
      run: poetry install --no-interaction --no-root

    - name: 🧪 Run Django checks
      working-directory: ./server 
      run: |
        # Simplifie la logique, car tu es déjà dans le répertoire server
        poetry run python manage.py check
        echo "✅ Django checks passed"
      continue-on-error: true

    - name: 🧪 Run Django tests
      working-directory: ./server 
      run: |
        # Simplifie la logique, car tu es déjà dans le répertoire server
        poetry run python manage.py test
        echo "✅ Django tests passed"
      continue-on-error: true

  # ====================================
  # JOB 3: DEPLOY STAGING (branche dev)
  # ====================================
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: './client/yarn.lock'

    - name: 🏗️ Build for staging with Yarn
      working-directory: ./client 
      run: |
        yarn install --frozen-lockfile
        yarn build
      env:
        VITE_AUTH0_DOMAIN: ${{ secrets.STAGING_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID: ${{ secrets.STAGING_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL: ${{ secrets.STAGING_API_BASE_URL }}

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: staging-build
        path: client/dist/ 
        if-no-files-found: warn

    - name: 🚀 Deploy notification
      run: |
        echo "🎉 Staging deployment completed!"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"

  # =============================================
  # JOB 4: DEPLOY PRODUCTION (branche main)
  # =============================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: './client/yarn.lock'

    - name: 🏗️ Build for production with Yarn
      working-directory: ./client
      run: |
        yarn install --frozen-lockfile
        yarn build
      env:
        VITE_AUTH0_DOMAIN: ${{ secrets.PROD_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID: ${{ secrets.PROD_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL: ${{ secrets.PROD_API_BASE_URL }}

    - name: 📦 Upload production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: client/dist/ # <-- Ajuste le chemin si nécessaire

    - name: 🎉 Production deployment
      run: |
        echo "🚀 Production deployment completed!"
        echo "Live at: https://gaming_followers.com"