name: 🎮 Gaming Platform CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # =============================================
  # JOB 1: FRONTEND - Tests et qualité
  # =============================================
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        # Configuration du cache adaptative
        cache: ${{ hashFiles('yarn.lock') != '' && 'yarn' || (hashFiles('package-lock.json') != '' && 'npm' || '') }}
    
    - name: 🔧 Install dependencies
      run: |
        if [ -f "yarn.lock" ]; then
          yarn install --frozen-lockfile
        elif [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
    
    - name: 🧹 Lint code (if available)
      run: |
        if npm run lint --if-present; then
          echo "✅ Lint passed"
        else
          echo "⚠️ No lint script found"
        fi
      continue-on-error: true
    
    - name: 🧪 Run tests (if available)
      run: |
        if npm run test --if-present; then
          echo "✅ Tests passed"
        else
          echo "⚠️ No test script found"
        fi
      continue-on-error: true
    
    - name: 🏗️ Build project
      run: |
        if npm run build --if-present; then
          echo "✅ Build successful"
        else
          echo "⚠️ No build script found"
        fi
      continue-on-error: true

  # =============================================
  # JOB 2: BACKEND DJANGO (si présent)
  # =============================================
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔧 Install Python dependencies (if available)
      run: |
        if [ -f "requirements.txt" ]; then
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Python dependencies installed"
        elif [ -f "backend/requirements.txt" ]; then
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Backend dependencies installed"
        else
          echo "⚠️ No requirements.txt found"
        fi
      continue-on-error: true
    
    - name: 🧪 Run Django tests (if available)
      run: |
        if [ -f "manage.py" ]; then
          python manage.py check
          echo "✅ Django checks passed"
        elif [ -f "backend/manage.py" ]; then
          cd backend
          python manage.py check
          echo "✅ Backend Django checks passed"
        else
          echo "⚠️ No Django project found"
        fi
      continue-on-error: true

  # =============================================
  # JOB 3: DEPLOY STAGING (branche dev)
  # =============================================
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        # Configuration du cache adaptative
        cache: ${{ hashFiles('yarn.lock') != '' && 'yarn' || (hashFiles('package-lock.json') != '' && 'npm' || '') }}
    
    - name: 🏗️ Build for staging
      run: |
        if [ -f "yarn.lock" ]; then
          yarn install --frozen-lockfile
          if yarn build; then
            echo "✅ Build successful with Yarn"
          fi
        elif [ -f "package-lock.json" ]; then
          npm ci
          if npm run build; then
            echo "✅ Build successful with NPM"
          fi
        else
          echo "⚠️ No package manager lock file found"
        fi
      env:
        VITE_AUTH0_DOMAIN: ${{ secrets.STAGING_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID: ${{ secrets.STAGING_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL: ${{ secrets.STAGING_API_BASE_URL }}
    
    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: staging-build
        path: |
          dist/
          build/
        if-no-files-found: warn
    
    - name: 🚀 Deploy notification
      run: |
        echo "🎉 Staging deployment completed!"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"

  # =============================================
  # JOB 4: DEPLOY PRODUCTION (branche main)
  # =============================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        # Configuration du cache adaptative
        cache: ${{ hashFiles('yarn.lock') != '' && 'yarn' || (hashFiles('package-lock.json') != '' && 'npm' || '') }}
    
    - name: 🏗️ Build for production
      run: |
        if [ -f "yarn.lock" ]; then
          yarn install --frozen-lockfile
          yarn build
        elif [ -f "package-lock.json" ]; then
          npm ci
          npm run build
        fi
      env:
        VITE_AUTH0_DOMAIN: ${{ secrets.PROD_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID: ${{ secrets.PROD_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL: ${{ secrets.PROD_API_BASE_URL }}
    
    - name: 📦 Upload production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: |
          dist/
          build/
    
    - name: 🎉 Production deployment
      run: |
        echo "🚀 Production deployment completed!"
        echo "Live at: https://your-gaming-platform.com"