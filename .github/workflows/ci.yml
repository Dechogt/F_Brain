name: 🎮 Gaming Followers CI/CD

on:
  push:
    branches: [ dev, main ]  #Il faut que je gere de telles faccoons que le push sur dev gere le merge vers main
  pull_request:
    branches: [ dev, main ]

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================
  # JOB 1: 🗄️ DATABASE HEALTH CHECK
  # =============================================
  database-check:
    name: 🗄️ PostgreSQL Health
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Create test .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=gaming_followers_test
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        EOF

    - name: 🗄️ Start PostgreSQL service
      run: |
        docker compose up -d db
        echo "⏳ Waiting for PostgreSQL to be ready..."
        timeout 60 bash -c 'until docker compose exec db pg_isready -U test_user -d gaming_followers_test; do sleep 2; done'
        echo "✅ PostgreSQL is ready!"

    - name: 🧪 Test database connection
      run: |
        docker compose exec db psql -U test_user -d gaming_followers_test -c "SELECT version();"
        echo "✅ Database connection successful"

    - name: 🧹 Cleanup
      if: always()
      run: docker compose down -v

  # =============================================
  # JOB 2: 🐰 RABBITMQ HEALTH CHECK
  # =============================================
  rabbitmq-check:
    name: 🐰 RabbitMQ Health
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Create test .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=gaming_followers_test
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        EOF

    - name: 🐰 Start RabbitMQ service
      run: |
        docker compose up -d rabbitmq
        echo "⏳ Waiting for RabbitMQ to be ready..."
        # Augmente le timeout (par exemple, à 120 ou 180 secondes)
        timeout 30 bash -c 'until docker compose exec rabbitmq rabbitmqctl status; do sleep 3; done'
        echo "✅ RabbitMQ is ready!"
      continue-on-error: true
    

  # =============================================
  # JOB 3: 📊 MONITORING STACK HEALTH
  # =============================================
  monitoring-check:
    name: 📊 Monitoring Stack
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Create test .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=gaming_followers_test
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        GF_SECURITY_ADMIN_USER=admin
        GF_SECURITY_ADMIN_PASSWORD=admin123
        EOF

    - name: 📊 Start Prometheus
      run: |
        docker compose up -d prometheus
        echo "⏳ Waiting for Prometheus..."
        timeout 60 bash -c 'until curl -f http://localhost:9090/-/ready; do sleep 2; done'
        echo "✅ Prometheus is ready!"

    - name: 📈 Start Grafana
      run: |
        docker compose up -d grafana
        echo "⏳ Waiting for Grafana..."
        timeout 90 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 3; done'
        echo "✅ Grafana is ready!"

    - name: 🧪 Test monitoring endpoints
      run: |
        # Test Prometheus metrics
        curl -f http://localhost:9090/api/v1/query?query=up
        echo "✅ Prometheus metrics accessible"
        
        # Test Grafana API
        curl -f -u admin:admin123 http://localhost:3000/api/datasources
        echo "✅ Grafana API accessible"

    - name: 🧹 Cleanup
      if: always()
      run: docker compose down -v

  # =============================================
  # JOB 4: 🎨 FRONTEND BUILD & TEST
  # =============================================
  frontend-test:
    name: 🎨 Frontend (React/Vite)
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🎨 Build frontend image
      run: |
        docker compose build frontend
        echo "✅ Frontend image built successfully"

    - name: 🧪 Run frontend tests
      run: |
        # Test build process
        docker compose run --rm frontend npm run build
        echo "✅ Frontend build successful"
        
        # Run tests if they exist
        docker compose run --rm frontend npm test --passWithNoTests --watchAll=false
        echo "✅ Frontend tests passed"
      continue-on-error: true
    - name: 🔍 Check frontend lint
      run: |
        docker compose run --rm frontend npm run lint || echo "⚠️ Linting issues found"

  # =============================================
  # JOB 5: 🐍 BACKEND (Django) BUILD & TEST
  # =============================================
  backend-test:
    name: 🐍 Backend (Django)
    runs-on: ubuntu-latest
    needs: [database-check]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔧 Create test .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=gaming_followers_test
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        EOF

    - name: 🗄️ Start database for backend tests
      run: |
        docker compose up -d db
        timeout 60 bash -c 'until docker compose exec db pg_isready -U test_user -d gaming_followers_test; do sleep 2; done'

    - name: 🐍 Build backend image
      run: |
        docker compose build web
        echo "✅ Backend image built successfully"

    - name: 🧪 Run Django system checks
      run: |
        docker compose run --rm web python manage.py check --deploy
        echo "✅ Django system checks passed"

    - name: 🔄 Run Django migrations (dry-run)
      run: |
        docker compose run --rm web python manage.py makemigrations --dry-run --check
        echo "✅ Django migrations check passed"

    - name: 🧪 Run Django tests
      run: |
        docker compose run --rm --env-file .env web python manage.py test --verbosity=2
        echo "✅ Django tests passed"
      continue-on-error: true
    - name: 📊 Check Django admin
      run: |
        docker compose run --rm web python manage.py collectstatic --noinput
        echo "✅ Static files collected successfully"

    - name: 🧹 Cleanup
      if: always()
      run: docker compose down -v

  # =============================================
  # JOB 6: ⚙️ CELERY WORKER TEST
  # =============================================
  celery-test:
    name: ⚙️ Celery Worker
    runs-on: ubuntu-latest
    needs: [rabbitmq-check, backend-test]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Create test .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=gaming_followers_test
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        EOF

    - name: 🚀 Start dependencies
      run: |
        docker compose up -d db rabbitmq
        echo "⏳ Waiting for services..."
        timeout 60 bash -c 'until docker compose exec db pg_isready -U test_user -d gaming_followers_test; do sleep 2; done'
        timeout 90 bash -c 'until docker compose exec rabbitmq rabbitmqctl status; do sleep 3; done'

    - name: ⚙️ Test Celery worker startup
      run: |
        # Start celery worker in background and test
        timeout 30 docker compose run --rm celery celery -A server_config inspect ping || echo "⚠️ Celery worker test"
        echo "✅ Celery worker configuration validated"

    - name: 🧹 Cleanup
      if: always()
      run: docker compose down -v

  # =============================================
  # JOB 7: 🌐 NGINX PROXY TEST
  # =============================================
  nginx-test:
    name: 🌐 Nginx Proxy
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Create test .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=gaming_followers_test
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        EOF

    - name: 🚀 Start full stack for nginx test
      run: |
        docker compose up -d db
        timeout 60 bash -c 'until docker compose exec db pg_isready -U test_user -d gaming_followers_test; do sleep 2; done'
        
        docker compose up -d web frontend
        sleep 10
        
        docker compose up -d nginx
        sleep 5

    - name: 🧪 Test nginx routing
      run: |
        # Test if nginx is running
        timeout 30 bash -c 'until curl -f http://localhost:80; do sleep 2; done' || echo "⚠️ Nginx routing test"
        echo "✅ Nginx proxy configuration validated"

    - name: 🧹 Cleanup
      if: always()
      run: docker compose down -v

  # =============================================
  # JOB 8: 🔗 INTEGRATION TEST
  # =============================================
  integration-test:
    name: 🔗 Full Stack Integration
    runs-on: ubuntu-latest
    needs: [database-check, rabbitmq-check, monitoring-check, frontend-test, backend-test, celery-test, nginx-test]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Create test .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=gaming_followers_test
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        GF_SECURITY_ADMIN_USER=admin
        GF_SECURITY_ADMIN_PASSWORD=admin123
        EOF

    - name: 🚀 Start complete stack
      run: |
        echo "🚀 Starting complete Gaming Followers stack..."
        docker compose up -d
        
        echo "⏳ Waiting for all services to be ready..."
        sleep 30
        
        # Wait for critical services
        timeout 60 bash -c 'until docker compose exec db pg_isready -U test_user -d gaming_followers_test; do sleep 2; done'
        timeout 90 bash -c 'until docker compose exec rabbitmq rabbitmqctl status; do sleep 3; done'

    - name: 🧪 Full integration tests
      run: |
        echo "🔍 Testing service connectivity..."
        
        # Test database connectivity from backend
        docker compose exec web python manage.py dbshell --command="SELECT 1;" || echo "⚠️ DB connection test"
        
        # Test web service health
        timeout 30 bash -c 'until curl -f http://localhost:8000; do sleep 2; done' || echo "⚠️ Backend health test"
        
        # Test frontend availability  
        timeout 30 bash -c 'until curl -f http://localhost:5173; do sleep 2; done' || echo "⚠️ Frontend health test"
        
        # Test nginx proxy
        timeout 30 bash -c 'until curl -f http://localhost:80; do sleep 2; done' || echo "⚠️ Nginx proxy test"
        
        echo "✅ Full stack integration test completed"

    - name: 📊 Generate test report
      run: |
        echo "📊 GAMING FOLLOWERS - INTEGRATION TEST REPORT"
        echo "=============================================="
        echo "🗄️ Database: $(docker compose ps db --format json | jq -r '.[0].State')"
        echo "🐰 RabbitMQ: $(docker compose ps rabbitmq --format json | jq -r '.[0].State')"
        echo "🐍 Backend: $(docker compose ps web --format json | jq -r '.[0].State')"
        echo "🎨 Frontend: $(docker compose ps frontend --format json | jq -r '.[0].State')"
        echo "⚙️ Celery: $(docker compose ps celery --format json | jq -r '.[0].State')"
        echo "🌐 Nginx: $(docker compose ps nginx --format json | jq -r '.[0].State')"
        echo "📊 Prometheus: $(docker compose ps prometheus --format json | jq -r '.[0].State')"
        echo "📈 Grafana: $(docker compose ps grafana --format json | jq -r '.[0].State')"

    - name: 🧹 Cleanup
      if: always()
      run: docker compose down -v

  # ================================
  # JOB 9: 🧪 DEPLOY STAGING (dev)
  # ================================
  deploy-staging:
    name: 🧪 Deploy Staging
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔧 Create staging .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=${{ secrets.STAGING_POSTGRES_DB }}
        POSTGRES_USER=${{ secrets.STAGING_POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.STAGING_POSTGRES_PASSWORD }}
        VITE_AUTH0_DOMAIN=${{ secrets.STAGING_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID=${{ secrets.STAGING_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}
        GF_SECURITY_ADMIN_USER=${{ secrets.STAGING_GRAFANA_USER }}
        GF_SECURITY_ADMIN_PASSWORD=${{ secrets.STAGING_GRAFANA_PASSWORD }}
        EOF

    - name: 🏗️ Build and push staging images
      run: |
        export IMAGE_TAG=staging-${{ github.sha }}
        
        # Build all services
        docker compose build
        
        # Tag and push main services
        docker tag gaming-followers-web:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:$IMAGE_TAG
        docker tag gaming-followers-frontend:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG
        docker tag gaming-followers-nginx:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:$IMAGE_TAG
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:$IMAGE_TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:$IMAGE_TAG

    - name: 🚀 Deploy notification
      run: |
        echo "🧪 Staging deployment completed!"
        echo "🔗 Images pushed to registry with tag: staging-${{ github.sha }}"

  # =============================================
  # JOB 10: 🚀 DEPLOY PRODUCTION (main)
  # =============================================
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔧 Create production .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}
        POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
        VITE_AUTH0_DOMAIN=${{ secrets.PROD_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID=${{ secrets.PROD_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}
        GF_SECURITY_ADMIN_USER=${{ secrets.PROD_GRAFANA_USER }}
        GF_SECURITY_ADMIN_PASSWORD=${{ secrets.PROD_GRAFANA_PASSWORD }}
        EOF

    - name: 🏗️ Build and push production images
      run: |
        export IMAGE_TAG=prod-${{ github.sha }}
        
        # Build all services
        docker compose build
        
        # Tag and push main services
        docker tag gaming-followers-web:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:$IMAGE_TAG
        docker tag gaming-followers-frontend:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG
        docker tag gaming-followers-nginx:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:$IMAGE_TAG
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:$IMAGE_TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:$IMAGE_TAG

    - name: 🎉 Production deployment notification
      run: |
        echo "🚀 Production deployment completed!"
        echo "🔗 Images pushed to registry with tag: prod-${{ github.sha }}"
        echo "🌟 Gaming Followers is live!"