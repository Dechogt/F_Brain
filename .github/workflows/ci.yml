name: 🎮 Gaming Followers CI/CD

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================
  # JOB 1: BUILD & TEST avec Docker Compose
  # =============================================
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔧 Create .env file for testing
      run: |
        cat > .env << EOF
        POSTGRES_DB=gaming_followers_test
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        GF_SECURITY_ADMIN_USER=admin
        GF_SECURITY_ADMIN_PASSWORD=admin123
        EOF

    - name: 🧪 Run tests with Docker Compose
      run: |
        # Build les services nécessaires pour les tests
        docker compose build web frontend
        
        # Lance la DB et les tests backend
        docker compose up -d db
        sleep 10
        
        # Tests Django
        docker compose run --rm web python manage.py check
        docker compose run --rm web python manage.py test
        
        # Tests frontend (si vous en avez)
        docker compose run --rm frontend npm test --passWithNoTests
        
        # Build final pour vérifier
        docker compose build --no-cache

    - name: 🧹 Cleanup
      if: always()
      run: docker compose down -v

  # ================================
  # JOB 2: DEPLOY STAGING (dev)
  # ================================
  deploy-staging:
    name: 🧪 Deploy Staging
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔧 Create staging .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=${{ secrets.STAGING_POSTGRES_DB }}
        POSTGRES_USER=${{ secrets.STAGING_POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.STAGING_POSTGRES_PASSWORD }}
        VITE_AUTH0_DOMAIN=${{ secrets.STAGING_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID=${{ secrets.STAGING_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}
        EOF

    - name: 🏗️ Build and push staging images
      run: |
        # Tag avec staging
        export IMAGE_TAG=staging-${{ github.sha }}
        
        # Build et push
        docker compose build
        docker tag ${{ github.repository }}-web:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:$IMAGE_TAG
        docker tag ${{ github.repository }}-frontend:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:$IMAGE_TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG

    - name: 🚀 Deploy to staging server
      if: false  # Activez quand vous avez un serveur
      run: |
        echo "🧪 Déploiement staging avec Docker Compose"
        # Ici vous ajouteriez vos commandes de déploiement réel
        # ssh vers votre serveur staging et docker compose up

  # =============================================
  # JOB 3: DEPLOY PRODUCTION (main)
  # =============================================
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔧 Create production .env
      run: |
        cat > .env << EOF
        POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}
        POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
        VITE_AUTH0_DOMAIN=${{ secrets.PROD_AUTH0_DOMAIN }}
        VITE_AUTH0_CLIENT_ID=${{ secrets.PROD_AUTH0_CLIENT_ID }}
        VITE_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}
        EOF

    - name: 🏗️ Build and push production images
      run: |
        # Tag avec production
        export IMAGE_TAG=prod-${{ github.sha }}
        
        # Build et push
        docker compose build
        docker tag ${{ github.repository }}-web:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:$IMAGE_TAG
        docker tag ${{ github.repository }}-frontend:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:$IMAGE_TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$IMAGE_TAG

    - name: 🎉 Deploy to production server
      if: false  # Activez quand vous avez un serveur
      run: |
        echo "🚀 Déploiement production avec Docker Compose"
        # Commandes de déploiement réel ici